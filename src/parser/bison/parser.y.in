// src/parser/bison/parser.y.in

/* @formatter:off */

%define api.pure full

%lex-param   { yyscan_t scanner }

%parse-param { yyscan_t scanner }
%parse-param { ast **result }
%parse-param { struct parser_ctx *ctx }

%code requires {
    #include "parser_types.h"
    struct parser_ctx;
}

%{
    #include <stdlib.h>
    #include <stdio.h>
    #include "ast.h"
    #include "parser_ctx.h"
%}

%code provides {
    int yyerror(yyscan_t scanner, ast **result, struct parser_ctx *ctx, const char *s);
    int yylex(YYSTYPE *yylval, yyscan_t scanner);
}

%union {
    int int_value;
    /*
    char *string_value;
    char *symbol_name_value;
    */
    ast *ast;
}

%token <int_value> INTEGER

// non-terminal lexeme types
%type <ast> number_atom

%start start

%%

start:
    @START_SYMBOL@ YYEOF { *result = $1; }
    ;

@GRAMMAR_RULES@

%%

int yyerror(yyscan_t scanner, ast **result, struct parser_ctx *ctx, const char *msg) {
    (void)scanner; (void)result; (void)ctx;
    fprintf(stderr, "Parse error: %s\n", msg);
    return 1;
}

/* @formatter:on */
