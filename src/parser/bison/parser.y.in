// src/parser/bison/parser.y.in

/* @formatter:off */
%define parse.error verbose
%define parse.trace
%define api.pure full

%lex-param   { yyscan_t scanner }

%parse-param { yyscan_t scanner }
%parse-param { ast **result }
%parse-param { struct parser_ctx *ctx }

%code requires {
#include "parser_types.h"
struct parser_ctx;
}

%{
#include <stdlib.h>
#include <stdio.h>
#include "ast.h"
#include "parser_ctx.h"
%}

%code provides {
int yyerror(yyscan_t scanner, ast **result, struct parser_ctx *ctx, const char *s);
int yylex(YYSTYPE *yylval, yyscan_t scanner);
}

%union {
    int int_value;
    char *string_value;
    char *symbol_name_value;
ast *ast;
}

@TERMINAL_LEXEMS_DECLARATION@

%left ADD SUBTRACT
%left MULTIPLY DIVIDE
%precedence UMINUS

%type <ast> @NON_TERMINAL_LEXEMS_LIST@

%token TU_MODE
%token ONE_STATEMENT_MODE
%token READABLE_MODE

%start start

%%

start
    : TU_MODE translation_unit END {
        /* sécurité croisée */
        if (ctx->goal != PARSE_GOAL_TU) YYERROR;
        *result = $2;
    }
    | ONE_STATEMENT_MODE statement {
        if (ctx->goal != PARSE_GOAL_ONE_STATEMENT) YYERROR;
        *result = $2;
        YYACCEPT;
    }
    | ONE_STATEMENT_MODE END {
        if (ctx->goal != PARSE_GOAL_ONE_STATEMENT) YYERROR;
        *result = NULL;
        YYACCEPT;
    }
    | READABLE_MODE readable {
        if (ctx->goal != PARSE_GOAL_READABLE) YYERROR;
        *result = $2;
        YYACCEPT;
    }
    ;

readable
    : evaluable {$$ = $1;}
    | translation_unit END_SENTINEL {$$ = $1;}
    ;

@GRAMMAR_RULES@

%%

int yyerror(yyscan_t scanner, ast **result, struct parser_ctx *ctx, const char *msg) {
    (void)scanner; (void)result; (void)ctx;
    fprintf(stderr, "Parse error: %s\n", msg);
    return 1;
}

/* @formatter:on */
