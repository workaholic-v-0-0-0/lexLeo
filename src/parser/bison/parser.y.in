// src/parser/bison/parser.y.in

/* @formatter:off */

%define api.pure full
//%expect 1
%lex-param   {yyscan_t scanner}
%parse-param {yyscan_t scanner}
%parse-param {ast **result}

%code requires {
#include "parser_types.h"
}

%{

#include "ast.h"
#include "symtab.h"
#include <stdlib.h>

#define YYDEBUG 1

%}

%code provides {
int yyerror(yyscan_t scanner, ast **result, const char *s);
int yylex(YYSTYPE *yylval, yyscan_t scanner);
}

%union {
int int_value;
char *string_value;
char *symbol_name_value;
ast *ast;
}

%token <int_value> INTEGER

// non-terminal lexeme types
%type <ast>
number

%start start

%%

start:
@START_SYMBOL@ YYEOF { *result = $1; }

@GRAMMAR_RULES@

%%

int yydebug = 0;

int yyerror(yyscan_t scanner, ast **result, const char *msg) {
fprintf(stderr, "Parse error: %s\n", msg);
return 1;
}

/* @formatter:on */
